using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using Normal.Realtime;
using Normal.Realtime.Serialization;

[RealtimeModel]
public partial class HPSyncModel
{
    [RealtimeProperty(1, true, true)]
    private int _hp;
}

/* ----- Begin Normal Autogenerated Code ----- */
public partial class HPSyncModel : RealtimeModel
{
    public int hp
    {
        get
        {
            return _hpProperty.value;
        }
        set
        {
            if (_hpProperty.value == value) return;
            _hpProperty.value = value;
            InvalidateReliableLength();
            FireHpDidChange(value);
        }
    }

    public delegate void PropertyChangedHandler<in T>(HPSyncModel model, T value);
    public event PropertyChangedHandler<int> hpDidChange;

    public enum PropertyID : uint
    {
        Hp = 1,
    }

    #region Properties

    private ReliableProperty<int> _hpProperty;

    #endregion

    public HPSyncModel() : base(null)
    {
        _hpProperty = new ReliableProperty<int>(1, _hp);
    }

    protected override void OnParentReplaced(RealtimeModel previousParent, RealtimeModel currentParent)
    {
        _hpProperty.UnsubscribeCallback();
    }

    private void FireHpDidChange(int value)
    {
        try
        {
            hpDidChange?.Invoke(this, value);
        }
        catch (System.Exception exception)
        {
            UnityEngine.Debug.LogException(exception);
        }
    }

    protected override int WriteLength(StreamContext context)
    {
        var length = 0;
        length += _hpProperty.WriteLength(context);
        return length;
    }

    protected override void Write(WriteStream stream, StreamContext context)
    {
        var writes = false;
        writes |= _hpProperty.Write(stream, context);
        if (writes) InvalidateContextLength(context);
    }

    protected override void Read(ReadStream stream, StreamContext context)
    {
        var anyPropertiesChanged = false;
        while (stream.ReadNextPropertyID(out uint propertyID))
        {
            var changed = false;
            switch (propertyID)
            {
                case (uint)PropertyID.Hp:
                    {
                        changed = _hpProperty.Read(stream, context);
                        if (changed) FireHpDidChange(hp);
                        break;
                    }
                default:
                    {
                        stream.SkipProperty();
                        break;
                    }
            }
            anyPropertiesChanged |= changed;
        }
        if (anyPropertiesChanged)
        {
            UpdateBackingFields();
        }
    }

    private void UpdateBackingFields()
    {
        _hp = hp;
    }

}
/* ----- End Normal Autogenerated Code ----- */
