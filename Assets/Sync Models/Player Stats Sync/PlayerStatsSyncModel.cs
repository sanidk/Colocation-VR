using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using Normal.Realtime;
using Normal.Realtime.Serialization;

[RealtimeModel]
public partial class PlayerStatsSyncModel
{
    //Realtime Property to sync
    //Arguments: ID, Reliable/Unreliable, Change Event

    [RealtimeProperty(1, false, true)]
    private float _health;

    [RealtimeProperty(2, false, true)]
    private float _energy;

    //Ammo probably doesnt need to be synced so this can maybe be used for something else I guess.
    [RealtimeProperty(3, false, true)]
    private int _ammo;

}

/* ----- Begin Normal Autogenerated Code ----- */
public partial class PlayerStatsSyncModel : RealtimeModel {
    public float health {
        get {
            return _healthProperty.value;
        }
        set {
            if (_healthProperty.value == value) return;
            _healthProperty.value = value;
            InvalidateUnreliableLength();
            FireHealthDidChange(value);
        }
    }
    
    public float energy {
        get {
            return _energyProperty.value;
        }
        set {
            if (_energyProperty.value == value) return;
            _energyProperty.value = value;
            InvalidateUnreliableLength();
            FireEnergyDidChange(value);
        }
    }
    
    public int ammo {
        get {
            return _ammoProperty.value;
        }
        set {
            if (_ammoProperty.value == value) return;
            _ammoProperty.value = value;
            InvalidateUnreliableLength();
            FireAmmoDidChange(value);
        }
    }
    
    public delegate void PropertyChangedHandler<in T>(PlayerStatsSyncModel model, T value);
    public event PropertyChangedHandler<float> healthDidChange;
    public event PropertyChangedHandler<float> energyDidChange;
    public event PropertyChangedHandler<int> ammoDidChange;
    
    public enum PropertyID : uint {
        Health = 1,
        Energy = 2,
        Ammo = 3,
    }
    
    #region Properties
    
    private UnreliableProperty<float> _healthProperty;
    
    private UnreliableProperty<float> _energyProperty;
    
    private UnreliableProperty<int> _ammoProperty;
    
    #endregion
    
    public PlayerStatsSyncModel() : base(null) {
        _healthProperty = new UnreliableProperty<float>(1, _health);
        _energyProperty = new UnreliableProperty<float>(2, _energy);
        _ammoProperty = new UnreliableProperty<int>(3, _ammo);
    }
    
    private void FireHealthDidChange(float value) {
        try {
            healthDidChange?.Invoke(this, value);
        } catch (System.Exception exception) {
            UnityEngine.Debug.LogException(exception);
        }
    }
    
    private void FireEnergyDidChange(float value) {
        try {
            energyDidChange?.Invoke(this, value);
        } catch (System.Exception exception) {
            UnityEngine.Debug.LogException(exception);
        }
    }
    
    private void FireAmmoDidChange(int value) {
        try {
            ammoDidChange?.Invoke(this, value);
        } catch (System.Exception exception) {
            UnityEngine.Debug.LogException(exception);
        }
    }
    
    protected override int WriteLength(StreamContext context) {
        var length = 0;
        length += _healthProperty.WriteLength(context);
        length += _energyProperty.WriteLength(context);
        length += _ammoProperty.WriteLength(context);
        return length;
    }
    
    protected override void Write(WriteStream stream, StreamContext context) {
        var writes = false;
        writes |= _healthProperty.Write(stream, context);
        writes |= _energyProperty.Write(stream, context);
        writes |= _ammoProperty.Write(stream, context);
        if (writes) InvalidateContextLength(context);
    }
    
    protected override void Read(ReadStream stream, StreamContext context) {
        var anyPropertiesChanged = false;
        while (stream.ReadNextPropertyID(out uint propertyID)) {
            var changed = false;
            switch (propertyID) {
                case (uint) PropertyID.Health: {
                    changed = _healthProperty.Read(stream, context);
                    if (changed) FireHealthDidChange(health);
                    break;
                }
                case (uint) PropertyID.Energy: {
                    changed = _energyProperty.Read(stream, context);
                    if (changed) FireEnergyDidChange(energy);
                    break;
                }
                case (uint) PropertyID.Ammo: {
                    changed = _ammoProperty.Read(stream, context);
                    if (changed) FireAmmoDidChange(ammo);
                    break;
                }
                default: {
                    stream.SkipProperty();
                    break;
                }
            }
            anyPropertiesChanged |= changed;
        }
        if (anyPropertiesChanged) {
            UpdateBackingFields();
        }
    }
    
    private void UpdateBackingFields() {
        _health = health;
        _energy = energy;
        _ammo = ammo;
    }
    
}
/* ----- End Normal Autogenerated Code ----- */
