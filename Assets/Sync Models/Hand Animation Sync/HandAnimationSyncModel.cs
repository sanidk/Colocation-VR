using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using Normal.Realtime;
using Normal.Realtime.Serialization;

[RealtimeModel]
public partial class HandAnimationSyncModel
{
    [RealtimeProperty(1, false, true)]
    private float _triggerValue;

    [RealtimeProperty(2, false, true)]
    private float _gripValue;
}

/* ----- Begin Normal Autogenerated Code ----- */
public partial class HandAnimationSyncModel : RealtimeModel {
    public float triggerValue {
        get {
            return _triggerValueProperty.value;
        }
        set {
            if (_triggerValueProperty.value == value) return;
            _triggerValueProperty.value = value;
            InvalidateUnreliableLength();
            FireTriggerValueDidChange(value);
        }
    }
    
    public float gripValue {
        get {
            return _gripValueProperty.value;
        }
        set {
            if (_gripValueProperty.value == value) return;
            _gripValueProperty.value = value;
            InvalidateUnreliableLength();
            FireGripValueDidChange(value);
        }
    }
    
    public delegate void PropertyChangedHandler<in T>(HandAnimationSyncModel model, T value);
    public event PropertyChangedHandler<float> triggerValueDidChange;
    public event PropertyChangedHandler<float> gripValueDidChange;
    
    public enum PropertyID : uint {
        TriggerValue = 1,
        GripValue = 2,
    }
    
    #region Properties
    
    private UnreliableProperty<float> _triggerValueProperty;
    
    private UnreliableProperty<float> _gripValueProperty;
    
    #endregion
    
    public HandAnimationSyncModel() : base(null) {
        _triggerValueProperty = new UnreliableProperty<float>(1, _triggerValue);
        _gripValueProperty = new UnreliableProperty<float>(2, _gripValue);
    }
    
    private void FireTriggerValueDidChange(float value) {
        try {
            triggerValueDidChange?.Invoke(this, value);
        } catch (System.Exception exception) {
            UnityEngine.Debug.LogException(exception);
        }
    }
    
    private void FireGripValueDidChange(float value) {
        try {
            gripValueDidChange?.Invoke(this, value);
        } catch (System.Exception exception) {
            UnityEngine.Debug.LogException(exception);
        }
    }
    
    protected override int WriteLength(StreamContext context) {
        var length = 0;
        length += _triggerValueProperty.WriteLength(context);
        length += _gripValueProperty.WriteLength(context);
        return length;
    }
    
    protected override void Write(WriteStream stream, StreamContext context) {
        var writes = false;
        writes |= _triggerValueProperty.Write(stream, context);
        writes |= _gripValueProperty.Write(stream, context);
        if (writes) InvalidateContextLength(context);
    }
    
    protected override void Read(ReadStream stream, StreamContext context) {
        var anyPropertiesChanged = false;
        while (stream.ReadNextPropertyID(out uint propertyID)) {
            var changed = false;
            switch (propertyID) {
                case (uint) PropertyID.TriggerValue: {
                    changed = _triggerValueProperty.Read(stream, context);
                    if (changed) FireTriggerValueDidChange(triggerValue);
                    break;
                }
                case (uint) PropertyID.GripValue: {
                    changed = _gripValueProperty.Read(stream, context);
                    if (changed) FireGripValueDidChange(gripValue);
                    break;
                }
                default: {
                    stream.SkipProperty();
                    break;
                }
            }
            anyPropertiesChanged |= changed;
        }
        if (anyPropertiesChanged) {
            UpdateBackingFields();
        }
    }
    
    private void UpdateBackingFields() {
        _triggerValue = triggerValue;
        _gripValue = gripValue;
    }
    
}
/* ----- End Normal Autogenerated Code ----- */
